import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config();

const supabase = createClient(
  process.env.VITE_SUPABASE_URL,
  process.env.VITE_SUPABASE_ANON_KEY
);

async function checkDuplicateCategories() {
  try {
    console.log('üîç Verificando categorias duplicadas...');
    
    // Buscar todas as categorias
    const { data: categories, error } = await supabase
      .from('categories')
      .select('*')
      .order('name');
    
    if (error) {
      console.error('‚ùå Erro ao buscar categorias:', error);
      return;
    }
    
    console.log(`üìä Total de categorias encontradas: ${categories.length}`);
    
    // Verificar duplicatas por nome
    const categoryNames = categories.map(cat => cat.name);
    const duplicateNames = categoryNames.filter((name, index) => categoryNames.indexOf(name) !== index);
    
    if (duplicateNames.length > 0) {
      console.log('‚ö†Ô∏è  Categorias duplicadas encontradas:');
      const uniqueDuplicates = [...new Set(duplicateNames)];
      
      for (const duplicateName of uniqueDuplicates) {
        const duplicateCategories = categories.filter(cat => cat.name === duplicateName);
        console.log(`\nüìÇ "${duplicateName}" (${duplicateCategories.length} ocorr√™ncias):`);
        duplicateCategories.forEach((cat, index) => {
          console.log(`  ${index + 1}. ID: ${cat.id}, Tipo: ${cat.type}, Criado em: ${cat.created_at}`);
        });
      }
    } else {
      console.log('‚úÖ Nenhuma categoria duplicada encontrada!');
    }
    
    // Mostrar todas as categorias para an√°lise
    console.log('\nüìã Lista completa de categorias:');
    categories.forEach((cat, index) => {
      console.log(`${index + 1}. ${cat.name} (${cat.type}) - ID: ${cat.id}`);
    });
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

checkDuplicateCategories();